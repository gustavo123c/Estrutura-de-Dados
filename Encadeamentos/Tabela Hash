#include <stdio.h>
#include <stdlib.h>

typedef struct hash {
    int qtd;
    int SIZE;
    int **itens;
} Hash;

// Função de hash (método da divisão)
int funcao_hash(int valor, int SIZE) {
    return valor % SIZE;
}

// Criação da tabela hash
Hash* cria_Hash(int SIZE) {
    Hash *ha = malloc(sizeof(Hash));
    if (ha != NULL) {
        ha->SIZE = SIZE;
        ha->qtd = 0;
        ha->itens = malloc(SIZE * sizeof(int*));
        if (ha->itens == NULL) {
            free(ha);
            return NULL;
        }
        for (int i = 0; i < SIZE; i++)
            ha->itens[i] = NULL;
    }
    return ha;
}

// Inserção simples (sem colisões)
int insere_Hash_semColisao(Hash *ha, int valor) {
    if (ha == NULL || ha->qtd == ha->SIZE)
        return 0;

    int pos = funcao_hash(valor, ha->SIZE);
    if (ha->itens[pos] != NULL)
        return 0; // colisão — não insere

    int *novo = malloc(sizeof(int));
    if (novo == NULL)
        return 0;

    *novo = valor;
    ha->itens[pos] = novo;
    ha->qtd++;
    return 1;
}

// Impressão da tabela hash
void imprimir_hash(Hash *ha) {
    if (ha != NULL) {
        printf("\nTabela (SIZE = %d, qtd = %d)\n", ha->SIZE, ha->qtd);
        for (int i = 0; i < ha->SIZE; i++) {
            if (ha->itens[i] != NULL)
                printf("[%d] = %d\n", i, *(ha->itens[i]));
            else
                printf("[%d] = NULL\n", i);
        }
    }
}

// Busca na hash
int busca_hash(Hash *ha, int valor) {
    if (ha == NULL || ha->qtd == 0)
        return 0;

    int pos = valor % ha->SIZE; // posição inicial

    if (ha->itens[pos] != NULL && *(ha->itens[pos]) == valor)
        return 1;

    return 0;
}

// Função principal
int main() {
    Hash *ha = cria_Hash(11); 
    if (ha == NULL) {
        printf("Erro ao criar a tabela hash.\n");
        return 1;
    }

    // Inserindo valores
    insere_Hash_semColisao(ha, 50);


    imprimir_hash(ha);

   
}
