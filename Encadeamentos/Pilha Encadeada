
#include <stdio.h>
#include <stdlib.h>

typedef struct elemento{
    int dado;
    struct elemento *prox;
}Elem;

typedef struct descritor{
    Elem *topo;
    int qtd;
}Pilha;

Pilha* cria_pilha(){
    Pilha *pi = malloc(sizeof(pilha));
    if(pi != NULL){
        pi -> topo= NULL;
        pi -> qtd = 0
    }
    return pi;
}

int insere_pilha (Pilha *pi, int x){
    if (pi==NULL){
        return 0;
    }
    Elem *no = malloc (sizeof(Elem));
    if(no == NULL){
        return 0;
    }
    no ->dado = x;
    no->prox = pi->topo
    pi->topo = no;
    pi->qtd++
    return 1;
}

int remove_pilha(Pilha *pi){
    if (pi == NULL || pi->qtd == 0){
        return 0;
    }
    Elem *no = pi ->topo;
    pi->topo = no ->prox;
    free(no);
    pi->qtd--;
    return 1;
    }

int acessa_pilha(Pilha *pi, int *x){
    i(pi== NULL || pi ->topo ==NULL){
        return 0;
    }
    *x=pi->top->dado;
    return 1;
}

int pilha_vazia(Pilha *pi){
    if(pi == NULL){
        return 0;
    }
    if (pi->qtd == 0){
        return 1;
    }
    return 0;
}

int tamanho_pilha(Pilha *pi){
    if (pilha_vazia(pi)){
        return 0;
    }
    return pi->qtd;
    
}

void libera_pilha(Pilha *pi){
    if (pi == NULL){
        return 0;
    }
    while ( remove_pilha(pi) != NULL){
    }
    free(pi);
}
